const CustomFusionReactorMachine = Java.loadClass("kono.morefusion.common.machine.multiblock.electric.CustomFusionReactorMachine")

GTCEuStartupEvents.registry('gtceu:machine', event => {
    // Primitive - EV
    // Casing: Seared Stone, Glass: Clear Glass from TConstruct. Coil: Naquadah Coil
    event.create('custom_fusion_reactor_primitive', 'multiblock').machine((holder) => new CustomFusionReactorMachine(holder, GTValues.EV, " (Primitive)", 281250))
        .rotationState(RotationState.ALL)
        .recipeTypes('fusion_reactor_mf')
        .recipeModifiers([GTRecipeModifiers.DEFAULT_ENVIRONMENT_REQUIREMENT,
                            (machine, recipe) => CustomFusionReactorMachine.recipeModifier(machine, recipe), GTRecipeModifiers.BATCH_MODE])
        .appearanceBlock(() => Block.getBlock('tconstruct:seared_stone'))
        .pattern(definition => FactoryBlockPattern.start()
            .aisle('###############', '######OGO######', '###############')
            .aisle('######ICI######', '####GGAAAGG####', '######ICI######')
            .aisle('####CC###CC####', '###EAAOGOAAE###', '####CC###CC####')
            .aisle('###C#######C###', '##EKEG###GEKE##', '###C#######C###')
            .aisle('##C#########C##', '#GAE#######EAG#', '##C#########C##')
            .aisle('##C#########C##', '#GAG#######GAG#', '##C#########C##')
            .aisle('#I###########I#', 'OAO#########OAO', '#I###########I#')
            .aisle('#C###########C#', 'GAG#########GAG', '#C###########C#')
            .aisle('#I###########I#', 'OAO#########OAO', '#I###########I#')
            .aisle('##C#########C##', '#GAG#######GAG#', '##C#########C##')
            .aisle('##C#########C##', '#GAE#######EAG#', '##C#########C##')
            .aisle('###C#######C###', '##EKEG###GEKE##', '###C#######C###')
            .aisle('####CC###CC####', '###EAAOGOAAE###', '####CC###CC####')
            .aisle('######ICI######', '####GGAAAGG####', '######ICI######')
            .aisle('###############', '######OSO######', '###############')
            .where('S', Predicates.controller(Predicates.blocks(definition.get())))
            .where('G', Predicates.blocks('tconstruct:clear_glass').or(Predicates.blocks('tconstruct:seared_stone')))
            .where('E', Predicates.blocks('tconstruct:seared_stone').or(Predicates.blocks(CustomFusionReactorMachine.rangedEnergyHatch(GTValues.EV)).setMinGlobalLimited(1).setMaxGlobalLimited(16)))
            .where('C', Predicates.blocks('tconstruct:seared_stone'))
            .where('K', Predicates.blocks('gtceu:naquadah_coil_block'))
            .where('O', Predicates.blocks('tconstruct:seared_stone').or(Predicates.abilities(PartAbility.EXPORT_FLUIDS, PartAbility.EXPORT_ITEMS)))
            .where('A', Predicates.air())
            .where('I', Predicates.blocks('tconstruct:seared_stone').or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMinGlobalLimited(2)).or(Predicates.abilities(PartAbility.IMPORT_ITEMS)))
            .where('#', Predicates.any())
            .build()
        )
        .workableCasingModel("tconstruct:block/smeltery/seared/stone", 'gtceu:block/multiblock/fusion_reactor')

    // Mk ZERO - IV
    // Casing: Netherite Block, Glass: Tined Glass from Minecraft. Coil: Fusion Coil
    event.create('custom_fusion_reactor_mk0', 'multiblock').machine((holder) => new CustomFusionReactorMachine(holder, GTValues.IV, " (MK ZERO)", 5000000))
        .rotationState(RotationState.ALL)
        .recipeTypes('fusion_reactor_mf')
        .recipeModifiers([GTRecipeModifiers.DEFAULT_ENVIRONMENT_REQUIREMENT,
                            (machine, recipe) => CustomFusionReactorMachine.recipeModifier(machine, recipe), GTRecipeModifiers.BATCH_MODE])
        .appearanceBlock(() => Block.getBlock('minecraft:netherite_block'))
        .pattern(definition => FactoryBlockPattern.start()
            .aisle('###############', '######OGO######', '###############')
            .aisle('######ICI######', '####GGAAAGG####', '######ICI######')
            .aisle('####CC###CC####', '###EAAOGOAAE###', '####CC###CC####')
            .aisle('###C#######C###', '##EKEG###GEKE##', '###C#######C###')
            .aisle('##C#########C##', '#GAE#######EAG#', '##C#########C##')
            .aisle('##C#########C##', '#GAG#######GAG#', '##C#########C##')
            .aisle('#I###########I#', 'OAO#########OAO', '#I###########I#')
            .aisle('#C###########C#', 'GAG#########GAG', '#C###########C#')
            .aisle('#I###########I#', 'OAO#########OAO', '#I###########I#')
            .aisle('##C#########C##', '#GAG#######GAG#', '##C#########C##')
            .aisle('##C#########C##', '#GAE#######EAG#', '##C#########C##')
            .aisle('###C#######C###', '##EKEG###GEKE##', '###C#######C###')
            .aisle('####CC###CC####', '###EAAOGOAAE###', '####CC###CC####')
            .aisle('######ICI######', '####GGAAAGG####', '######ICI######')
            .aisle('###############', '######OSO######', '###############')
            .where('S', Predicates.controller(Predicates.blocks(definition.get())))
            .where('G', Predicates.blocks('minecraft:tinted_glass').or(Predicates.blocks('minecraft:netherite_block')))
            .where('E', Predicates.blocks('minecraft:netherite_block').or(Predicates.blocks(CustomFusionReactorMachine.rangedEnergyHatch(GTValues.IV)).setMinGlobalLimited(1).setMaxGlobalLimited(16)))
            .where('C', Predicates.blocks('minecraft:netherite_block'))
            .where('K', Predicates.blocks('gtceu:fusion_coil'))
            .where('O', Predicates.blocks('minecraft:netherite_block').or(Predicates.abilities(PartAbility.EXPORT_FLUIDS, PartAbility.EXPORT_ITEMS)))
            .where('A', Predicates.air())
            .where('I', Predicates.blocks('minecraft:netherite_block').or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMinGlobalLimited(2)).or(Predicates.abilities(PartAbility.IMPORT_ITEMS)))
            .where('#', Predicates.any())
            .build()
        )
        .workableCasingModel("minecraft:block/netherite_block", 'gtceu:block/multiblock/fusion_reactor')
    
    // Mk I - LuV
    // Casing: Fusion Reactor Frame, Glass: Reactor Glass from MekanismGenerators. Coil: Fusion Coil
    event.create('custom_fusion_reactor_mk1', 'multiblock').machine((holder) => new CustomFusionReactorMachine(holder, GTValues.LuV, " (MK I)", 10000000))
        .rotationState(RotationState.ALL)
        .recipeTypes('fusion_reactor_mf')
        .recipeModifiers([GTRecipeModifiers.DEFAULT_ENVIRONMENT_REQUIREMENT,
                            (machine, recipe) => CustomFusionReactorMachine.recipeModifier(machine, recipe), GTRecipeModifiers.BATCH_MODE])
        .appearanceBlock(() => Block.getBlock('mekanismgenerators:fusion_reactor_frame'))
        .pattern(definition => FactoryBlockPattern.start()
            .aisle('###############', '######OGO######', '###############')
            .aisle('######ICI######', '####GGAAAGG####', '######ICI######')
            .aisle('####CC###CC####', '###EAAOGOAAE###', '####CC###CC####')
            .aisle('###C#######C###', '##EKEG###GEKE##', '###C#######C###')
            .aisle('##C#########C##', '#GAE#######EAG#', '##C#########C##')
            .aisle('##C#########C##', '#GAG#######GAG#', '##C#########C##')
            .aisle('#I###########I#', 'OAO#########OAO', '#I###########I#')
            .aisle('#C###########C#', 'GAG#########GAG', '#C###########C#')
            .aisle('#I###########I#', 'OAO#########OAO', '#I###########I#')
            .aisle('##C#########C##', '#GAG#######GAG#', '##C#########C##')
            .aisle('##C#########C##', '#GAE#######EAG#', '##C#########C##')
            .aisle('###C#######C###', '##EKEG###GEKE##', '###C#######C###')
            .aisle('####CC###CC####', '###EAAOGOAAE###', '####CC###CC####')
            .aisle('######ICI######', '####GGAAAGG####', '######ICI######')
            .aisle('###############', '######OSO######', '###############')
            .where('S', Predicates.controller(Predicates.blocks(definition.get())))
            .where('G', Predicates.blocks('mekanismgenerators:reactor_glass').or(Predicates.blocks('mekanismgenerators:fusion_reactor_frame')))
            .where('E', Predicates.blocks('mekanismgenerators:fusion_reactor_frame').or(Predicates.blocks(CustomFusionReactorMachine.rangedEnergyHatch(GTValues.LuV)).setMinGlobalLimited(1).setMaxGlobalLimited(16)))
            .where('C', Predicates.blocks('mekanismgenerators:fusion_reactor_frame'))
            .where('K', Predicates.blocks('gtceu:fusion_coil'))
            .where('O', Predicates.blocks('mekanismgenerators:fusion_reactor_frame').or(Predicates.abilities(PartAbility.EXPORT_FLUIDS, PartAbility.EXPORT_ITEMS)))
            .where('A', Predicates.air())
            .where('I', Predicates.blocks('mekanismgenerators:fusion_reactor_frame').or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMinGlobalLimited(2)).or(Predicates.abilities(PartAbility.IMPORT_ITEMS)))
            .where('#', Predicates.any())
            .build()
        )
        .workableCasingModel("mekanismgenerators:block/reactor_frame", 'gtceu:block/multiblock/fusion_reactor')

    // Mk II - ZPM
    // Casing: Fusion Casing Mk3, Glass: Fusion Glass, Coil: Fusion Coil
    event.create('custom_fusion_reactor_mk2', 'multiblock').machine((holder) => new CustomFusionReactorMachine(holder, GTValues.ZPM, " (MK II)", 20000000))
        .rotationState(RotationState.ALL)
        .recipeTypes('fusion_reactor_mf')
        .recipeModifiers([GTRecipeModifiers.DEFAULT_ENVIRONMENT_REQUIREMENT,
                            (machine, recipe) => CustomFusionReactorMachine.recipeModifier(machine, recipe), GTRecipeModifiers.BATCH_MODE])
        .appearanceBlock(() => Block.getBlock('gtceu:fusion_casing_mk3'))
        .pattern(definition => FactoryBlockPattern.start()
            .aisle('###############', '######OGO######', '###############')
            .aisle('######ICI######', '####GGAAAGG####', '######ICI######')
            .aisle('####CC###CC####', '###EAAOGOAAE###', '####CC###CC####')
            .aisle('###C#######C###', '##EKEG###GEKE##', '###C#######C###')
            .aisle('##C#########C##', '#GAE#######EAG#', '##C#########C##')
            .aisle('##C#########C##', '#GAG#######GAG#', '##C#########C##')
            .aisle('#I###########I#', 'OAO#########OAO', '#I###########I#')
            .aisle('#C###########C#', 'GAG#########GAG', '#C###########C#')
            .aisle('#I###########I#', 'OAO#########OAO', '#I###########I#')
            .aisle('##C#########C##', '#GAG#######GAG#', '##C#########C##')
            .aisle('##C#########C##', '#GAE#######EAG#', '##C#########C##')
            .aisle('###C#######C###', '##EKEG###GEKE##', '###C#######C###')
            .aisle('####CC###CC####', '###EAAOGOAAE###', '####CC###CC####')
            .aisle('######ICI######', '####GGAAAGG####', '######ICI######')
            .aisle('###############', '######OSO######', '###############')
            .where('S', Predicates.controller(Predicates.blocks(definition.get())))
            .where('G', Predicates.blocks('gtceu:fusion_glass').or(Predicates.blocks('gtceu:fusion_casing_mk3')))
            .where('E', Predicates.blocks('gtceu:fusion_casing_mk3').or(Predicates.blocks(CustomFusionReactorMachine.rangedEnergyHatch(GTValues.UV)).setMinGlobalLimited(1).setMaxGlobalLimited(16)))
            .where('C', Predicates.blocks('gtceu:fusion_casing_mk3'))
            .where('K', Predicates.blocks('gtceu:fusion_coil'))
            .where('O', Predicates.blocks('gtceu:fusion_casing_mk3').or(Predicates.abilities(PartAbility.EXPORT_FLUIDS, PartAbility.EXPORT_ITEMS)))
            .where('A', Predicates.air())
            .where('I', Predicates.blocks('gtceu:fusion_casing_mk3').or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMinGlobalLimited(2)).or(Predicates.abilities(PartAbility.IMPORT_ITEMS)))
            .where('#', Predicates.any())
            .build()
        )
        .workableCasingModel("gtceu:block/casings/fusion/fusion_casing_mk3", 'gtceu:block/multiblock/fusion_reactor')
    
    // Mk III - UV
    // Casing: Atomic Casing, Glass: Fusion Glass, Coil: Fusion Coil
    event.create('custom_fusion_reactor_mk3', 'multiblock').machine((holder) => new CustomFusionReactorMachine(holder, GTValues.UV, " (MK III)", 40000000))
        .rotationState(RotationState.ALL)
        .recipeTypes('fusion_reactor_mf')
        .recipeModifiers([GTRecipeModifiers.DEFAULT_ENVIRONMENT_REQUIREMENT,
                            (machine, recipe) => CustomFusionReactorMachine.recipeModifier(machine, recipe), GTRecipeModifiers.BATCH_MODE])
        .appearanceBlock(() => Block.getBlock('gtceu:atomic_casing'))
        .pattern(definition => FactoryBlockPattern.start()
            .aisle('###############', '######OGO######', '###############')
            .aisle('######ICI######', '####GGAAAGG####', '######ICI######')
            .aisle('####CC###CC####', '###EAAOGOAAE###', '####CC###CC####')
            .aisle('###C#######C###', '##EKEG###GEKE##', '###C#######C###')
            .aisle('##C#########C##', '#GAE#######EAG#', '##C#########C##')
            .aisle('##C#########C##', '#GAG#######GAG#', '##C#########C##')
            .aisle('#I###########I#', 'OAO#########OAO', '#I###########I#')
            .aisle('#C###########C#', 'GAG#########GAG', '#C###########C#')
            .aisle('#I###########I#', 'OAO#########OAO', '#I###########I#')
            .aisle('##C#########C##', '#GAG#######GAG#', '##C#########C##')
            .aisle('##C#########C##', '#GAE#######EAG#', '##C#########C##')
            .aisle('###C#######C###', '##EKEG###GEKE##', '###C#######C###')
            .aisle('####CC###CC####', '###EAAOGOAAE###', '####CC###CC####')
            .aisle('######ICI######', '####GGAAAGG####', '######ICI######')
            .aisle('###############', '######OSO######', '###############')
            .where('S', Predicates.controller(Predicates.blocks(definition.get())))
            .where('G', Predicates.blocks('gtceu:fusion_glass').or(Predicates.blocks('gtceu:atomic_casing')))
            .where('E', Predicates.blocks('gtceu:atomic_casing').or(Predicates.blocks(CustomFusionReactorMachine.rangedEnergyHatch(GTValues.UV)).setMinGlobalLimited(1).setMaxGlobalLimited(16)))
            .where('C', Predicates.blocks('gtceu:atomic_casing'))
            .where('K', Predicates.blocks('gtceu:fusion_coil'))
            .where('O', Predicates.blocks('gtceu:atomic_casing').or(Predicates.abilities(PartAbility.EXPORT_FLUIDS, PartAbility.EXPORT_ITEMS)))
            .where('A', Predicates.air())
            .where('I', Predicates.blocks('gtceu:atomic_casing').or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMinGlobalLimited(2)).or(Predicates.abilities(PartAbility.IMPORT_ITEMS)))
            .where('#', Predicates.any())
            .build()
        )
        .workableCasingModel("gtceu:block/casings/gcym/atomic_casing", 'gtceu:block/multiblock/fusion_reactor')
})